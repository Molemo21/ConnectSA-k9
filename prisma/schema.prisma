generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  PROVIDER
  ADMIN
}

enum ProviderStatus {
  INCOMPLETE
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String
  phone         String?
  avatar        String?
  role          UserRole  @default(CLIENT)
  emailVerified Boolean   @default(false)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Social login fields
  googleId      String?   @unique
  appleId       String?   @unique

  // Provider-specific fields
  provider      Provider?
  
  // Client-specific fields
  clientBookings Booking[] @relation("ClientBookings")

  // Email verification tokens
  verificationTokens VerificationToken[]

  providerReviews ProviderReview[] @relation("AdminProviderReviews")

  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Provider {
  id          String         @id @default(cuid())
  userId      String         @unique
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  businessName     String?
  description      String?
  experience       Int?
  hourlyRate       Float?
  location        String?
  
  // Documents for verification
  idDocument      String?
  proofOfAddress  String?
  certifications  String[]
  profileImages   String[]
  
  status          ProviderStatus @default(INCOMPLETE)
  
  services        ProviderService[]
  bookings        Booking[]
  reviews         Review[]
  providerReviews ProviderReview[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("providers")
}

model Service {
  id          String    @id @default(cuid())
  name        String
  description String?
  category    String
  basePrice   Float?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  providers   ProviderService[]
  bookings    Booking[]

  @@map("services")
}

model ProviderService {
  id         String   @id @default(cuid())
  providerId String
  serviceId  String
  customRate Float?
  
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, serviceId])
  @@map("provider_services")
}

model Booking {
  id          String        @id @default(cuid())
  clientId    String
  providerId  String
  serviceId   String
  
  scheduledDate DateTime
  duration      Int         // in hours
  totalAmount   Float
  platformFee   Float
  description   String?
  address       String
  
  status        BookingStatus @default(PENDING)
  
  client        User        @relation("ClientBookings", fields: [clientId], references: [id])
  provider      Provider    @relation(fields: [providerId], references: [id])
  service       Service     @relation(fields: [serviceId], references: [id])
  
  payment       Payment?
  review        Review?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("bookings")
}

model Payment {
  id            String   @id @default(cuid())
  bookingId     String   @unique
  amount        Float
  paystackRef   String   @unique
  status        String
  paidAt        DateTime?
  
  booking       Booking  @relation(fields: [bookingId], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("payments")
}

model Review {
  id         String   @id @default(cuid())
  bookingId  String   @unique
  providerId String
  rating     Int      // 1-5 stars
  comment    String?
  
  booking    Booking  @relation(fields: [bookingId], references: [id])
  provider   Provider @relation(fields: [providerId], references: [id])
  
  createdAt  DateTime @default(now())

  @@map("reviews")
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model ProviderReview {
  id          String   @id @default(cuid())
  providerId  String
  adminId     String
  comment     String
  status      ProviderStatus
  createdAt   DateTime @default(now())

  provider    Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  admin       User     @relation("AdminProviderReviews", fields: [adminId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}
