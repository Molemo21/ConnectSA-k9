generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String?
  name                String
  phone               String?
  avatar              String?
  role                UserRole             @default(CLIENT)
  emailVerified       Boolean              @default(false)
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  googleId            String?              @unique
  appleId             String?              @unique
  messages            Message[]            @relation("UserMessages")
  notifications       Notification[]
  passwordResetTokens PasswordResetToken[]
  providerReviews     ProviderReview[]     @relation("AdminProviderReviews")
  verificationTokens  VerificationToken[]
  clientBookings      Booking[]            @relation("ClientBookings")
  provider            Provider?
  disputes            Dispute[]            @relation("UserDisputes")
  adminDisputes       Dispute[]            @relation("AdminDisputes")
  adminAuditLogs      AdminAuditLog[]      @relation("AdminAuditLogs")
  payments            Payment[]

  @@map("users")
}

model Provider {
  id              String            @id @default(cuid())
  userId          String            @unique
  businessName    String?
  description     String?
  experience      Int?
  hourlyRate      Float?
  location        String?
  idDocument      String?
  proofOfAddress  String?
  certifications  String[]
  profileImages   String[]
  status          ProviderStatus    @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  available       Boolean?          @default(true)
  
  // Bank details for Paystack transfers
  bankName        String?
  bankCode        String?
  accountNumber   String?
  accountName     String?
  recipientCode   String?           @map("recipient_code")
  
  proposals       Proposal[]
  providerReviews ProviderReview[]
  bookings        Booking[]
  services        ProviderService[]
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews         Review[]
  payouts         Payout[]
  jobProofs       JobProof[]

  @@map("providers")
}

model Service {
  id          String            @id @default(cuid())
  name        String
  description String?
  category    String
  basePrice   Float?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  bookings    Booking[]
  providers   ProviderService[]

  @@map("services")
}

model ProviderService {
  id         String   @id @default(cuid())
  providerId String
  serviceId  String
  customRate Float?
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([providerId, serviceId])
  @@map("provider_services")
}

model Booking {
  id            String        @id @default(cuid())
  clientId      String
  providerId    String
  serviceId     String
  scheduledDate DateTime
  duration      Int
  totalAmount   Float
  platformFee   Float
  description   String?
  address       String
  status        BookingStatus @default(PENDING)
  payoutStatus  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  messages      Message[]
  proposals     Proposal[]
  client        User          @relation("ClientBookings", fields: [clientId], references: [id])
  provider      Provider      @relation(fields: [providerId], references: [id])
  service       Service       @relation(fields: [serviceId], references: [id])
  payment       Payment?
  review        Review?
  jobProof      JobProof?
  dispute       Dispute?
  transfer      Transfer?

  @@map("bookings")
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String        @unique
  userId          String?       @map("user_id")
  amount          Float
  paystackRef     String        @unique
  status          PaymentStatus
  escrowAmount    Float         @map("escrow_amount")
  platformFee     Float         @map("platform_fee")
  currency        String        @default("ZAR")
  transactionId   String?       @map("transaction_id")
  authorizationUrl String?      @map("authorization_url")
  accessCode      String?       @map("access_code")
  errorMessage    String?       @map("error_message")
  providerResponse Json?        @map("provider_response")
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  booking         Booking       @relation(fields: [bookingId], references: [id])
  user            User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  payout          Payout?

  @@map("payments")
}

model Review {
  id         String   @id @default(cuid())
  bookingId  String   @unique
  providerId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  provider   Provider @relation(fields: [providerId], references: [id])

  @@map("reviews")
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("VerificationToken")
}

model ProviderReview {
  id         String         @id @default(cuid())
  providerId String
  adminId    String
  comment    String
  status     ProviderStatus
  createdAt  DateTime       @default(now())
  admin      User           @relation("AdminProviderReviews", fields: [adminId], references: [id], onDelete: Cascade)
  provider   Provider       @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Proposal {
  id         String    @id @default(cuid())
  bookingId  String
  providerId String
  status     String
  message    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  booking    Booking   @relation(fields: [bookingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  provider   Provider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("proposals")
}

model Message {
  id        String    @id @default(cuid())
  bookingId String
  senderId  String
  content   String
  sentAt    DateTime  @default(now())
  booking   Booking   @relation(fields: [bookingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sender    User      @relation("UserMessages", fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("messages")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String   // Changed from 'message' to 'content' for UI consistency
  type      String
  isRead    Boolean  @default(false) @map("isRead")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("notifications")
}

model Payout {
  id           String       @id @default(cuid())
  paymentId    String       @unique
  providerId   String
  amount       Float
  paystackRef  String       @map("paystack_ref")
  status       PayoutStatus
  transferCode String?      @map("transfer_code")
  recipientCode String?     @map("recipient_code")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  payment      Payment      @relation(fields: [paymentId], references: [id])
  provider     Provider     @relation(fields: [providerId], references: [id])

  @@map("payouts")
}

model JobProof {
  id             String    @id @default(cuid())
  bookingId      String    @unique
  providerId     String
  photos         String[]
  notes          String?
  completedAt    DateTime  @map("completed_at")
  clientConfirmed Boolean? @map("client_confirmed")
  confirmedAt    DateTime? @map("confirmed_at")
  autoConfirmAt  DateTime  @map("auto_confirm_at")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  booking        Booking   @relation(fields: [bookingId], references: [id])
  provider       Provider  @relation(fields: [providerId], references: [id])

  @@map("job_proofs")
}

model Dispute {
  id          String        @id @default(cuid())
  bookingId   String        @unique
  raisedBy    String
  reason      String
  description String
  status      DisputeStatus @default(PENDING)
  resolvedBy  String?
  resolution  String?
  resolvedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  booking     Booking       @relation(fields: [bookingId], references: [id])
  raisedByUser User         @relation("UserDisputes", fields: [raisedBy], references: [id])
  resolvedByUser User?      @relation("AdminDisputes", fields: [resolvedBy], references: [id])

  @@map("disputes")
}

model WebhookEvent {
  id          String   @id @default(cuid())
  eventType   String   // Database has 'eventType' not 'event_type'
  paystackRef String?  // Database has 'paystackRef' not 'paystack_ref'
  payload     Json
  processed   Boolean  @default(false)
  error       String?
  retryCount  Int      @default(0) // Database has 'retryCount' not 'retry_count'
  createdAt   DateTime @default(now()) // Database has 'createdAt' not 'created_at'
  processedAt DateTime? // Database has 'processedAt' not 'processed_at'

  @@map("webhook_events")
}

model AdminAuditLog {
  id          String      @id @default(cuid())
  adminId     String
  action      AuditAction
  targetType  String      // 'USER', 'PROVIDER', 'BOOKING', etc.
  targetId    String
  details     Json?       // Additional action details
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())
  
  admin       User        @relation("AdminAuditLogs", fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_audit_logs")
}

enum UserRole {
  CLIENT
  PROVIDER
  ADMIN
}

enum PaymentStatus {
  PENDING
  ESCROW
  HELD_IN_ESCROW
  PROCESSING_RELEASE
  RELEASED
  COMPLETED
  REFUNDED
  FAILED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum DisputeStatus {
  PENDING
  RESOLVED
  ESCALATED
}

enum ProviderStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
  INCOMPLETE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  PENDING_EXECUTION
  IN_PROGRESS
  AWAITING_CONFIRMATION
  PAYMENT_PROCESSING
  COMPLETED
  CANCELLED
  DISPUTED
}

enum AuditAction {
  USER_SUSPENDED
  USER_UNSUSPENDED
  USER_DELETED
  USER_ROLE_CHANGED
  PROVIDER_APPROVED
  PROVIDER_REJECTED
  PROVIDER_SUSPENDED
  PROVIDER_UNSUSPENDED
  PAYMENT_RELEASED
  PAYMENT_REFUNDED
  BOOKING_CANCELLED
  DISPUTE_RESOLVED
  SYSTEM_MAINTENANCE
}

model Transfer {
  id                    String   @id @default(cuid())
  bookingId             String   @unique
  providerId            String
  amountCents           BigInt
  currency              String   @default("ZAR")
  status                String   @default("pending") // pending, initiated, failed, completed, canceled
  paystackTransferCode  String?
  paystackRecipientCode String?
  idempotencyKey        String   @unique
  attempts              Int      @default(0)
  lastError             String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  booking               Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([providerId])
  @@map("transfers")
}

model AuditLog {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  service     String   // booking, payment, provider, client, admin, auth, webhook, system
  action      String   // create, update, delete, accept, reject, etc.
  status      String   // success, failed, pending, retry, timeout
  errorCode   String?  @map("error_code")
  message     String
  level       String   // info, warn, error, debug
  userId      String?  @map("user_id")
  bookingId   String?  @map("booking_id")
  paymentId   String?  @map("payment_id")
  providerId  String?  @map("provider_id")
  metadata    Json?
  stack       String?

  @@index([timestamp])
  @@index([service])
  @@index([action])
  @@index([status])
  @@index([userId])
  @@index([bookingId])
  @@index([paymentId])
  @@map("audit_logs")
}
